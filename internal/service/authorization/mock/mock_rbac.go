// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nokamoto/grpc-cue-envoy-rbac/internal/service/authorization (interfaces: RBAC)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/nokamoto/grpc-cue-envoy-rbac/pkg/api"
	grpc "google.golang.org/grpc"
)

// MockRBAC is a mock of RBAC interface.
type MockRBAC struct {
	ctrl     *gomock.Controller
	recorder *MockRBACMockRecorder
}

// MockRBACMockRecorder is the mock recorder for MockRBAC.
type MockRBACMockRecorder struct {
	mock *MockRBAC
}

// NewMockRBAC creates a new mock instance.
func NewMockRBAC(ctrl *gomock.Controller) *MockRBAC {
	mock := &MockRBAC{ctrl: ctrl}
	mock.recorder = &MockRBACMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRBAC) EXPECT() *MockRBACMockRecorder {
	return m.recorder
}

// AuthorizeUser mocks base method.
func (m *MockRBAC) AuthorizeUser(arg0 context.Context, arg1 *api.AuthorizeUserRequest, arg2 ...grpc.CallOption) (*api.AuthorizeUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthorizeUser", varargs...)
	ret0, _ := ret[0].(*api.AuthorizeUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeUser indicates an expected call of AuthorizeUser.
func (mr *MockRBACMockRecorder) AuthorizeUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeUser", reflect.TypeOf((*MockRBAC)(nil).AuthorizeUser), varargs...)
}
